diff --git a/config.def.h b/config.def.h
index 6d3135e..1f02c14 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,10 +1,25 @@
 /* modifier 0 means no modifier */
 static int surfuseragent    = 1;  /* Append Surf version to default WebKit user agent */
 static char *fulluseragent  = ""; /* Or override the whole user agent string */
-static char *scriptfile     = "~/.surf/script.js";
-static char *styledir       = "~/.surf/styles/";
-static char *cachedir       = "~/.surf/cache/";
-static char *cookiefile     = "~/.surf/cookies.txt";
+static char *scriptfile     = "~/.config/.surf/script.js";
+static char *styledir       = "~/.config/.surf/styles/";
+static char *cachedir       = "~/.config/.surf/cache/";
+static char *cookiefile     = "~/.config/.surf/cookies.txt";
+
+static char *searchengine = "https://duckduckgo.com/?q=";
+
+static SearchEngine searchengines[] = {
+        { "lib",	"http://gen.lib.rus.ec/search.php?req=%s&lg_topic=libgen&open=0&view=simple&res=25&phrase=0&column=def"   },
+        { "aw",		"https://wiki.archlinux.org/index.php?search=%s&title=Special%3ASearch" },
+        { "vw",		"https://wiki.voidlinux.org/index.php?search=%s&title=Special%3ASearch&go=Go" },
+        { "osm",	"https://www.openstreetmap.org/search?query=%s" },
+        { "i",		"https://duckduckgo.com/?q=%s&atb=v1-1&t=h_&iar=images" },
+        { "tpb",	"https://pirateproxy.app/s/?q=%s&=on&page=0&orderby=99" },
+        { "eb",		"https://www.ebay.com/sch/i.html?_from=R40&_trksid=m570.l1313&_nkw=%s&_sacat=0" },
+        { "wt",		"https://www.wiktionary.org/search-redirect.php?family=wiktionary&language=en&search=%s&go=Go" },
+        { "w",		"https://www.wikipedia.org/search-redirect.php?family=wikipedia&language=en&search=%s&language=en&go=Go" },
+        { "yt",		"https://www.youtube.com/results?search_query=%s" },
+};
 
 /* Webkit default features */
 static Parameter defconfig[ParameterLast] = {
@@ -13,7 +28,7 @@ static Parameter defconfig[ParameterLast] = {
 	SETV(CookiePolicies,     "@Aa"),
 	SETB(DiskCache,          1),
 	SETB(DNSPrefetch,        0),
-	SETI(FontSize,           12),
+	SETI(FontSize,           16),
 	SETB(FrameFlattening,    0),
 	SETB(Geolocation,        0),
 	SETB(HideBackground,     0),
@@ -45,13 +60,16 @@ static UriParameters uriparams[] = {
 static WebKitFindOptions findopts = WEBKIT_FIND_OPTIONS_CASE_INSENSITIVE |
                                     WEBKIT_FIND_OPTIONS_WRAP_AROUND;
 
-#define SETPROP(p, q) { \
+#define PROMPT_GO   "Go:"
+#define PROMPT_FIND "Find:"
+
+#define SETPROP(r, s, p) { \
         .v = (const char *[]){ "/bin/sh", "-c", \
-             "prop=\"`xprop -id $2 $0 " \
-             "| sed \"s/^$0(STRING) = \\(\\\\\"\\?\\)\\(.*\\)\\1$/\\2/\" " \
-             "| xargs -0 printf %b | dmenu`\" &&" \
-             "xprop -id $2 -f $1 8s -set $1 \"$prop\"", \
-             p, q, winid, NULL \
+             "prop=\"$(printf '%b' \"$(xprop -id $1 $2 " \
+             "| sed \"s/^$2(STRING) = //;s/^\\\"\\(.*\\)\\\"$/\\1/\" && cut -d' ' -f1 ~/personal/bookmarks)\" " \
+             "| dmenu -i -p \"$4\" -w $1)\" && " \
+             "xprop -id $1 -f $3 8s -set $3 \"$prop\"", \
+             "surf-setprop", winid, r, s, p, NULL \
         } \
 }
 
@@ -82,6 +100,17 @@ static WebKitFindOptions findopts = WEBKIT_FIND_OPTIONS_CASE_INSENSITIVE |
         } \
 }
 
+/* BM_ADD(readprop) */
+#define BM_ADD(r) {\
+        .v = (const char *[]){ "/bin/sh", "-c", \
+             "(echo $(xprop -id $0 $1) | cut -d '\"' -f2 " \
+             "| sed 's/.*https*:\\/\\/\\(www\\.\\)\\?//' && cat ~/personal/bookmarks) " \
+             "| awk '!seen[$0]++' > ~/.config/surf/bookmarks.tmp && " \
+             "mv ~/.config/surf/bookmarks.tmp ~/personal/bookmarks", \
+             winid, r, NULL \
+        } \
+}
+
 /* styles */
 /*
  * The iteration will stop at the first match, beginning at the beginning of
@@ -101,15 +130,19 @@ static SiteStyle styles[] = {
  */
 static Key keys[] = {
 	/* modifier              keyval          function    arg */
-	{ MODKEY,                GDK_KEY_g,      spawn,      SETPROP("_SURF_URI", "_SURF_GO") },
-	{ MODKEY,                GDK_KEY_f,      spawn,      SETPROP("_SURF_FIND", "_SURF_FIND") },
-	{ MODKEY,                GDK_KEY_slash,  spawn,      SETPROP("_SURF_FIND", "_SURF_FIND") },
+	{ 0,                     GDK_KEY_g,      spawn,      SETPROP("_SURF_URI", "_SURF_GO", PROMPT_GO) },
+	{ 0,                     GDK_KEY_f,      spawn,      SETPROP("_SURF_FIND", "_SURF_FIND", PROMPT_FIND) },
+	{ 0,                     GDK_KEY_slash,  spawn,      SETPROP("_SURF_FIND", "_SURF_FIND", PROMPT_FIND) },
+  { 0,                     GDK_KEY_m,      spawn,      BM_ADD("_SURF_URI") },
+  { 0,                     GDK_KEY_w,      playexternal, {0 } },
+
+  { 0,                     GDK_KEY_i,      insert,     { .i = 1 } },
+	{ 0,                     GDK_KEY_Escape, insert,     { .i = 0 } },
 
-	{ 0,                     GDK_KEY_Escape, stop,       { 0 } },
-	{ MODKEY,                GDK_KEY_c,      stop,       { 0 } },
+	{ 0,                     GDK_KEY_c,      stop,       { 0 } },
 
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_r,      reload,     { .b = 1 } },
-	{ MODKEY,                GDK_KEY_r,      reload,     { .b = 0 } },
+	{ MODKEY,                GDK_KEY_r,      reload,     { .b = 1 } },
+	{ 0,                     GDK_KEY_r,      reload,     { .b = 0 } },
 
 	{ MODKEY,                GDK_KEY_l,      navigate,   { .i = +1 } },
 	{ MODKEY,                GDK_KEY_h,      navigate,   { .i = -1 } },
@@ -117,40 +150,41 @@ static Key keys[] = {
 	/* Currently we have to use scrolling steps that WebKit2GTK+ gives us
 	 * d: step down, u: step up, r: step right, l:step left
 	 * D: page down, U: page up */
-	{ MODKEY,                GDK_KEY_j,      scroll,     { .i = 'd' } },
-	{ MODKEY,                GDK_KEY_k,      scroll,     { .i = 'u' } },
-	{ MODKEY,                GDK_KEY_b,      scroll,     { .i = 'U' } },
-	{ MODKEY,                GDK_KEY_space,  scroll,     { .i = 'D' } },
-	{ MODKEY,                GDK_KEY_i,      scroll,     { .i = 'r' } },
-	{ MODKEY,                GDK_KEY_u,      scroll,     { .i = 'l' } },
+	{ 0,                     GDK_KEY_j,      scroll,     { .i = 'd' } },
+	{ 0,                     GDK_KEY_k,      scroll,     { .i = 'u' } },
+  { 0,                     GDK_KEY_d,      scroll,     { .i = 'D' } },
+  { 0,                     GDK_KEY_u,      scroll,     { .i = 'U' } },
+	{ 0,                     GDK_KEY_h,      scroll,     { .i = 'l' } },
+	{ 0,                     GDK_KEY_l,      scroll,     { .i = 'r' } },
 
 
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_j,      zoom,       { .i = -1 } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_k,      zoom,       { .i = +1 } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_q,      zoom,       { .i = 0  } },
-	{ MODKEY,                GDK_KEY_minus,  zoom,       { .i = -1 } },
-	{ MODKEY,                GDK_KEY_plus,   zoom,       { .i = +1 } },
+	{ 0|GDK_SHIFT_MASK,      GDK_KEY_j,      zoom,       { .i = -1 } },
+	{ 0|GDK_SHIFT_MASK,      GDK_KEY_k,      zoom,       { .i = +1 } },
+	{ 0|GDK_SHIFT_MASK,      GDK_KEY_q,      zoom,       { .i = 0  } },
+	{ 0,                     GDK_KEY_minus,  zoom,       { .i = -1 } },
+	{ 0|GDK_SHIFT_MASK,      GDK_KEY_plus,   zoom,       { .i = +1 } },
+  { 0,                     GDK_KEY_equal,  zoom,       { .i = 0  } },
 
-	{ MODKEY,                GDK_KEY_p,      clipboard,  { .b = 1 } },
-	{ MODKEY,                GDK_KEY_y,      clipboard,  { .b = 0 } },
+	{ 0,                     GDK_KEY_p,      clipboard,  { .b = 1 } },
+	{ 0,                     GDK_KEY_y,      clipboard,  { .b = 0 } },
 
-	{ MODKEY,                GDK_KEY_n,      find,       { .i = +1 } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_n,      find,       { .i = -1 } },
+	{ 0,                     GDK_KEY_n,      find,       { .i = +1 } },
+	{ 0|GDK_SHIFT_MASK,      GDK_KEY_n,      find,       { .i = -1 } },
 
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_p,      print,      { 0 } },
+	{ MODKEY,                GDK_KEY_p,      print,      { 0 } },
 
 	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_a,      togglecookiepolicy, { 0 } },
 	{ 0,                     GDK_KEY_F11,    togglefullscreen, { 0 } },
 	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_o,      toggleinspector, { 0 } },
 
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_c,      toggle,     { .i = CaretBrowsing } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_f,      toggle,     { .i = FrameFlattening } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_g,      toggle,     { .i = Geolocation } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_s,      toggle,     { .i = JavaScript } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_i,      toggle,     { .i = LoadImages } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_v,      toggle,     { .i = Plugins } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_b,      toggle,     { .i = ScrollBars } },
-	{ MODKEY|GDK_SHIFT_MASK, GDK_KEY_m,      toggle,     { .i = Style } },
+	/* { MODKEY|GDK_SHIFT_MASK, GDK_KEY_c,      toggle,     { .i = CaretBrowsing } }, */
+	/* { MODKEY|GDK_SHIFT_MASK, GDK_KEY_f,      toggle,     { .i = FrameFlattening } }, */
+	/* { MODKEY|GDK_SHIFT_MASK, GDK_KEY_g,      toggle,     { .i = Geolocation } }, */
+	/* { MODKEY|GDK_SHIFT_MASK, GDK_KEY_s,      toggle,     { .i = JavaScript } }, */
+	/* { MODKEY|GDK_SHIFT_MASK, GDK_KEY_i,      toggle,     { .i = LoadImages } }, */
+	/* { MODKEY|GDK_SHIFT_MASK, GDK_KEY_v,      toggle,     { .i = Plugins } }, */
+	/* { MODKEY|GDK_SHIFT_MASK, GDK_KEY_b,      toggle,     { .i = ScrollBars } }, */
+	/* { MODKEY|GDK_SHIFT_MASK, GDK_KEY_m,      toggle,     { .i = Style } }, */
 };
 
 /* button definitions */
diff --git a/surf.c b/surf.c
index 93a1629..9bf0519 100644
--- a/surf.c
+++ b/surf.c
@@ -128,6 +128,11 @@ typedef struct {
 	unsigned int stopevent;
 } Button;
 
+typedef struct {
+  char *token;
+  char *uri;
+} SearchEngine;
+
 typedef struct {
 	const char *uri;
 	Parameter config[ParameterLast];
@@ -172,6 +177,7 @@ static void newwindow(Client *c, const Arg *a, int noembed);
 static void spawn(Client *c, const Arg *a);
 static void destroyclient(Client *c);
 static void cleanup(void);
+static int insertmode = 0;
 
 /* GTK/WebKit */
 static WebKitWebView *newview(Client *c, WebKitWebView *rv);
@@ -202,6 +208,7 @@ static void responsereceived(WebKitDownload *d, GParamSpec *ps, Client *c);
 static void download(Client *c, WebKitURIResponse *r);
 static void closeview(WebKitWebView *v, Client *c);
 static void destroywin(GtkWidget* w, Client *c);
+static gchar *parseuri(const gchar *uri);
 
 /* Hotkeys */
 static void pasteuri(GtkClipboard *clipboard, const char *text, gpointer d);
@@ -217,6 +224,8 @@ static void togglefullscreen(Client *c, const Arg *a);
 static void togglecookiepolicy(Client *c, const Arg *a);
 static void toggleinspector(Client *c, const Arg *a);
 static void find(Client *c, const Arg *a);
+static void insert(Client *c, const Arg *a);
+static void playexternal(Client *c, const Arg *a);
 
 /* Buttons */
 static void clicknavigate(Client *c, const Arg *a, WebKitHitTestResult *h);
@@ -477,7 +486,16 @@ loaduri(Client *c, const Arg *a)
 		url = g_strdup_printf("file://%s", path);
 		free(path);
 	} else {
-		url = g_strdup_printf("http://%s", uri);
+    regex_t urlregex;
+
+    int urlcheck;
+    urlcheck = regcomp(&urlregex, "^[a-z0-9-]+[.][a-z.]+[^[:space:]]*$", REG_EXTENDED | REG_ICASE);
+    urlcheck = regexec(&urlregex, uri, 0, NULL, 0);
+    if (!urlcheck)
+            url = g_strdup_printf("http://%s", uri);
+    else
+            url = parseuri(uri);
+    regfree(&urlregex);
 	}
 
 	setatom(c, AtomUri, url);
@@ -1109,7 +1127,11 @@ winevent(GtkWidget *w, GdkEvent *e, Client *c)
 		updatetitle(c);
 		break;
 	case GDK_KEY_PRESS:
-		if (!curconfig[KioskMode].val.b) {
+		if (!curconfig[KioskMode].val.i &&
+        !insertmode ||
+        CLEANMASK(e->key.state) == (MODKEY|GDK_SHIFT_MASK) ||
+        CLEANMASK(e->key.state) == (MODKEY) ||
+        gdk_keyval_to_lower(e->key.keyval) == (GDK_KEY_Escape)) {
 			for (i = 0; i < LENGTH(keys); ++i) {
 				if (gdk_keyval_to_lower(e->key.keyval) ==
 				    keys[i].keyval &&
@@ -1461,6 +1483,22 @@ destroywin(GtkWidget* w, Client *c)
 		gtk_main_quit();
 }
 
+gchar *
+parseuri(const gchar *uri) {
+        guint i;
+
+        for (i = 0; i < LENGTH(searchengines); i++) {
+                if (searchengines[i].token == NULL || searchengines[i].uri == NULL ||
+                                *(uri + strlen(searchengines[i].token)) != ' ')
+                        continue;
+                if (g_str_has_prefix(uri, searchengines[i].token))
+                        return g_strdup_printf(searchengines[i].uri,
+                                        uri + strlen(searchengines[i].token) + 1);
+        }
+
+        return g_strdup_printf("%s%s", searchengine, uri);
+}
+
 void
 pasteuri(GtkClipboard *clipboard, const char *text, gpointer d)
 {
@@ -1624,6 +1662,12 @@ find(Client *c, const Arg *a)
 	}
 }
 
+void
+insert(Client *c, const Arg *a)
+{
+        insertmode = (a->i);
+}
+
 void
 clicknavigate(Client *c, const Arg *a, WebKitHitTestResult *h)
 {
@@ -1648,6 +1692,15 @@ clickexternplayer(Client *c, const Arg *a, WebKitHitTestResult *h)
 	spawn(c, &arg);
 }
 
+void
+playexternal(Client *c, const Arg *a)
+{
+  Arg arg;
+
+  arg = (Arg)VIDEOPLAY(geturi(c));
+  spawn(c, &arg);
+}
+
 int
 main(int argc, char *argv[])
 {
